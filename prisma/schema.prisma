// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  username String @unique

  knowledges Knowledge[]
  categories Category[]
  tags       Tag[]

  @@map("users")
}

model Knowledge {
  id          String @id @default(uuid())
  title       String
  description String

  //理解度の管理
  averageUnderstandingLevel Float       @default(0)
  lastReviewDate            DateTime?
  isReviewRequired          Boolean   @default(false)

  //作成、更新日
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //ユーザーと紐づけ
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  //カテゴリーと紐づけ
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  //タグと多対多の関連
  knowledgeTags KnowledgeTag[]

  //学習項目との関連
  studyItems StudyItem[]

  @@unique([title, userId])
  @@map("knowledges")
}

model StudyItem {
  id                 String  @id @default(uuid())
  title              String
  content            String
  isCompleted        Boolean @default(false)
  understandingLevel Int     @default(0)

  knowledgeId  String
  memo         Knowledge @relation(fields: [knowledgeId], references: [id], onDelete: Cascade)

  @@map("study_items")
}

model Category {
  id    String @id @default(uuid())
  name  String
  color String @default("#3B82F6")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  knowledges Knowledge[]

  @@unique([name, userId])
  @@map("categories")
}

model Tag {
  id    String @id @default(uuid())
  name  String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  knowledgeTags KnowledgeTag[]

  @@unique([name, userId])
  @@map("tags")
}

// 多対多の関連を定義するための中間テーブル
model KnowledgeTag {
  id String @id @default(uuid())

  knowledgeId String
  knowledge   Knowledge @relation(fields: [knowledgeId], references: [id], onDelete: Cascade)

  tagId       String
  tag         Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([knowledgeId, tagId])
  @@map("knowledge_tags")
}
